public class Main {
    //    К задачам из предыдущего дз добавить абстракции. т е на этом дз нужно
//гарантированно продумать иерархию компонент и взаимодействия их
//между собой.
//Обеспечить переход от использования явных классов в сторону
//использования абстрактных типов. Т е работаем не с:
//- конкретным экземпляром генеалогического древа, а с интерфейсом “генеалогическое древо”
//- конкретным экземпляром котика, а с интерфейсом “котик”, лучше уйти от взаимодействия с
// конкретными питомцами и повысить уровень абстракции до взаимодействия с котиком, собачкой или
// хомяком т е с интерфейсом “животное”
//Предложить любопытный сценарий - что если внезапно котик пропал, и
//на его место хозяин хочет поставить хомячка. Т е прямая отсылка к
//внедрению и инверсии зависимостей.
    public static void main(String[] args) {

        Persona father = new Persona("Иван", "Мужсой", 35, "lib1");
        Persona son = new Persona("Сергей", "Мужской", 5, "lib2");

        Pets dog = new Pets("Рекс", "Мужской", 4);
        Pets cat = new Pets("Барсик", "Мужкой", 3);

        father.PersLibr.AddBook("Пушкин", "Собрание сочинений", "RU");
        father.PersLibr.AddBook("Носов", "Незнайка на луне", "RU");

        son.PersLibr.AddBook("Народное авторство", "Азбука", "RU");
        father.addName(son);
        view.treeView(father, 0);

        System.out.println("*".repeat(15));
        view.bookView(father);

        System.out.println("*".repeat(15));
        view.bookView(son);

    }
}